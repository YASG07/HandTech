
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftNEleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENTRPARENTAND ASSIGN BOOL COMENTARIOS COMENTARIOS_MULTILINEA COMMA DECIMAL DECRE DIVIDE DOT EQUALS FIN_DE_INSTRUCCION GT GTE ID INCRE INCRE LKEY LPARENT LT LTE MINUS NE NOT NUMBER PLUS RKEY RPARENT SBLKEY SBRKEY SEMICOLON TIMES TWPOINT arm block console degree down else export fng1 fng2 fng3 fng4 fng5 for force hand if import is linkage mbm method mov piRad return rotate run sensor stop then up wait weight while wrist\n    program : block\n    \n    declare : expression\n    \n    declare : ID ASSIGN expression FIN_DE_INSTRUCCION \n    \n    expression : expression PLUS expression\n                |   expression MINUS expression\n                |   expression TIMES expression\n                |   expression DIVIDE expression\n                |   ID INCRE\n                |   ID DECRE \n    \n    expression : LPARENT expression RPARENT\n                |   LKEY expression RKEY\n                |   SBLKEY expression SBRKEY\n    \n    expression : expression LT expression\n                |   expression GT expression\n                |   expression LTE expression\n                |   expression GTE expression\n                |   expression NE expression\n                |   LPARENT expression RPARENT LT LPARENT expression RPARENT\n                |   LPARENT expression RPARENT GT LPARENT expression RPARENT\n                |   LPARENT expression RPARENT GTE LPARENT expression RPARENT\n                |   LPARENT expression RPARENT LTE LPARENT expression RPARENT\n                |   LPARENT expression RPARENT NE LPARENT expression RPARENT\n    \n    expression : expression AND expression\n                |   NOT expression\n                |   LPARENT expression RPARENT AND LPARENT expression RPARENT\n                |   NOT LPARENT expression RPARENT\n    '
    
_lr_action_items = {'block':([0,],[2,]),'$end':([1,2,],[0,-1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','sintactico.py',23),
  ('declare -> expression','declare',1,'p_expression','sintactico.py',32),
  ('declare -> ID ASSIGN expression FIN_DE_INSTRUCCION','declare',4,'p_assign','sintactico.py',39),
  ('expression -> expression PLUS expression','expression',3,'p_operations','sintactico.py',46),
  ('expression -> expression MINUS expression','expression',3,'p_operations','sintactico.py',47),
  ('expression -> expression TIMES expression','expression',3,'p_operations','sintactico.py',48),
  ('expression -> expression DIVIDE expression','expression',3,'p_operations','sintactico.py',49),
  ('expression -> ID INCRE','expression',2,'p_operations','sintactico.py',50),
  ('expression -> ID DECRE','expression',2,'p_operations','sintactico.py',51),
  ('expression -> LPARENT expression RPARENT','expression',3,'p_agrupacion','sintactico.py',58),
  ('expression -> LKEY expression RKEY','expression',3,'p_agrupacion','sintactico.py',59),
  ('expression -> SBLKEY expression SBRKEY','expression',3,'p_agrupacion','sintactico.py',60),
  ('expression -> expression LT expression','expression',3,'p_logicas','sintactico.py',67),
  ('expression -> expression GT expression','expression',3,'p_logicas','sintactico.py',68),
  ('expression -> expression LTE expression','expression',3,'p_logicas','sintactico.py',69),
  ('expression -> expression GTE expression','expression',3,'p_logicas','sintactico.py',70),
  ('expression -> expression NE expression','expression',3,'p_logicas','sintactico.py',71),
  ('expression -> LPARENT expression RPARENT LT LPARENT expression RPARENT','expression',7,'p_logicas','sintactico.py',72),
  ('expression -> LPARENT expression RPARENT GT LPARENT expression RPARENT','expression',7,'p_logicas','sintactico.py',73),
  ('expression -> LPARENT expression RPARENT GTE LPARENT expression RPARENT','expression',7,'p_logicas','sintactico.py',74),
  ('expression -> LPARENT expression RPARENT LTE LPARENT expression RPARENT','expression',7,'p_logicas','sintactico.py',75),
  ('expression -> LPARENT expression RPARENT NE LPARENT expression RPARENT','expression',7,'p_logicas','sintactico.py',76),
  ('expression -> expression AND expression','expression',3,'p_booleanos','sintactico.py',83),
  ('expression -> NOT expression','expression',2,'p_booleanos','sintactico.py',84),
  ('expression -> LPARENT expression RPARENT AND LPARENT expression RPARENT','expression',7,'p_booleanos','sintactico.py',85),
  ('expression -> NOT LPARENT expression RPARENT','expression',4,'p_booleanos','sintactico.py',86),
]
